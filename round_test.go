// Copyright 2014 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package round

import (
	"testing"
	"time"
)

func TestDurationN(t *testing.T) {
	tests := []struct {
		val time.Duration
		out []time.Duration
	}{
		{1, []time.Duration{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}},
		{123, []time.Duration{123, 100, 120, 123, 123, 123, 123, 123, 123, 123}},
		{1234, []time.Duration{1234, 1000, 1200, 1230, 1234, 1234, 1234, 1234, 1234, 1234}},
		{123456, []time.Duration{123456, 100000, 120000, 123000, 123500, 123460, 123456, 123456, 123456, 123456}},
		{123456789, []time.Duration{123456789, 100000000, 120000000, 123000000, 123500000, 123460000, 123457000, 123456800, 123456790, 123456789}},
		{12345678900, []time.Duration{12345678900, 10000000000, 12000000000, 12300000000, 12350000000, 12346000000, 12345700000, 12345680000, 12345679000, 12345678900}},
		{83456789000, []time.Duration{83456789000, 60000000000, 80000000000, 83000000000, 83500000000, 83460000000, 83457000000, 83456800000, 83456790000, 83456789000}},
		{754567890000, []time.Duration{754567890000, 600000000000, 780000000000, 750000000000, 755000000000, 754600000000, 754570000000, 754568000000, 754567900000, 754567890000}},
		{3623678900000, []time.Duration{3623678900000, 3600000000000, 3600000000000, 3620000000000, 3624000000000, 3623700000000, 3623680000000, 3623679000000, 3623678900000, 3623678900000}},
		{5025678900000, []time.Duration{5025678900000, 3600000000000, 4800000000000, 5040000000000, 5030000000000, 5026000000000, 5025700000000, 5025680000000, 5025679000000, 5025678900000}},
		{45263789000000, []time.Duration{45263789000000, 36000000000000, 46800000000000, 45000000000000, 45240000000000, 45260000000000, 45264000000000, 45263800000000, 45263790000000, 45263789000000}},
		{445554789000000, []time.Duration{445554789000000, 360000000000000, 432000000000000, 446400000000000, 445800000000000, 445560000000000, 445550000000000, 445555000000000, 445554800000000, 445554790000000}},
		{4447933890000000, []time.Duration{4447933890000000, 3600000000000000, 4320000000000000, 4464000000000000, 4449600000000000, 4447800000000000, 4447920000000000, 4447930000000000, 4447934000000000, 4447933900000000}},
	}
	for _, tt := range tests {
		for n, exp := range tt.out {
			if out := DurationN(tt.val, n); out != exp {
				t.Errorf("DurationN(%d, %d); expected: %d (%s); got: %d (%s)\n", tt.val, n, exp, exp, out, out)
			}
			if out := DurationN(-tt.val, n); out != -exp {
				t.Errorf("DurationN(%d, %d); expected: %d (%s); got: %d (%s)\n", -tt.val, n, -exp, -exp, out, out)
			}
		}
	}
}

func TestInt64N(t *testing.T) {
	tests := []struct {
		val int64
		out []int64
	}{
		{123, []int64{123, 100, 120, 123, 123, 123, 123, 123, 123, 123}},
		{123456, []int64{123456, 100000, 120000, 123000, 123500, 123460, 123456, 123456, 123456, 123456}},
	}
	for _, tt := range tests {
		for n, exp := range tt.out {
			if out := Int64N(tt.val, n); out != exp {
				t.Errorf("Int64N(%d, %d); expected: %d (%s); got: %d (%s)\n", tt.val, n, exp, exp, out, out)
			}
			if out := Int64N(-tt.val, n); out != -exp {
				t.Errorf("Int64N(%d, %d); expected: %d (%s); got: %d (%s)\n", -tt.val, n, -exp, -exp, out, out)
			}
		}
	}
}
